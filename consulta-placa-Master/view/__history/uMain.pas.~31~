unit uMain;

interface

uses IdTCPConnection, IdTCPClient, IdHTTP, IdBaseComponent, IdComponent,
  IdIOHandler, IdIOHandlerSocket, IdIOHandlerStack, IdSSL, IdSSLOpenSSL,
  Vcl.StdCtrls, Vcl.Controls, Vcl.ExtCtrls, System.Classes,
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, Vcl.Graphics,
   Vcl.Forms, Vcl.Dialogs, MaskUtils, ShellApi, System.JSON,StrUtils,  IdStack, IdStackConsts,
   WinInet, IpPeerClient, Vcl.Buttons,  Data.DB , ToolWin , Vcl.Grids, Vcl.DBGrids, Vcl.ComCtrls,
  IdServerIOHandler, REST.Types, Data.Bind.Components, Data.Bind.ObjectScope,
  REST.Client, REST.Authenticator.Basic, System.Net.URLClient,
  System.Net.HttpClient, System.Net.HttpClientComponent, System.NetEncoding, IdAuthenticationDigest, IdGlobal, REST.Response.Adapter,
  VCLTee.TeCanvas;

type
  TfrmMain = class(TForm)
    edtPlaca: TLabeledEdit;
    Marca: TLabeledEdit;
    Municipio: TLabeledEdit;
    Renavam: TLabeledEdit;
    Modelo: TLabeledEdit;
    Chassi: TLabeledEdit;
    IdSSLIOHandlerSocketOpenSSL1: TIdSSLIOHandlerSocketOpenSSL;
    IdHTTP1: TIdHTTP;
    Cor: TLabeledEdit;
    Combustivel: TLabeledEdit;
    Status: TEdit;
    LBSTATUS: TLabel;
    AnoModelo: TEdit;
    UF: TEdit;
    ValorFipe: TEdit;
    Label1: TLabel;
    nacionalidade: TEdit;
    Label3: TLabel;
    situacao: TEdit;
    Label4: TLabel;
    Label2: TLabel;
    restricao: TEdit;
    MemoLog: TMemo;
    Label5: TLabel;
    Ano: TEdit;
    Label6: TLabel;
    Clear: TButton;
    btnConsultar: TBitBtn;
    token: TEdit;
    Label7: TLabel;
    procedure btnConsultarClick(Sender: TObject);

    procedure conectarClick(Sender: TObject);
    procedure MemoLogChange(Sender: TObject);
    procedure ClearClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);

  private
      { Private declarations }
  public
    { Public declarations }
  end;

var
  frmMain: TfrmMain;

implementation

{$R *.dfm}


procedure TfrmMain.conectarClick(Sender: TObject);
var
  IdHTTP: TIdHTTP;
  JSONRequest, JSONResponse: TStringStream;
  URL, Body: string;
  LoginData: TJSONObject;
begin
  IdHTTP := TIdHTTP.Create(nil);
  JSONRequest := TStringStream.Create;
  JSONResponse := TStringStream.Create;

  try
    URL := 'https://cluster.apigratis.com/api/v1/login';

    // Criar objeto JSON com os dados de login
    LoginData := TJSONObject.Create;
    LoginData.AddPair('email', 'logisticapires@gmail.com');
    LoginData.AddPair('password', 'guilherme123');

    // Converter o objeto JSON em string e enviar como corpo da solicitação
    JSONRequest.WriteString(LoginData.ToString);

    IdHTTP.Request.ContentType := 'application/json';
    IdHTTP.Post(URL, JSONRequest, JSONResponse);

    // Extrair a mensagem do JSON e exibi-la no TEdit "status"
    try
      if Assigned(JSONResponse) then
      begin
        LoginData := TJSONObject.ParseJSONValue(JSONResponse.DataString) as TJSONObject;
        if Assigned(LoginData) then
        begin
          if LoginData.TryGetValue('message', Body) then
            status.Text := Body;
          LoginData.Free;
        end;
      end;
    except
      on E: Exception do
        ShowMessage('Erro ao extrair mensagem do JSON: ' + E.Message);
    end;

    // Aqui você pode fazer algo com o token de autenticação recebido, como armazená-lo para uso posterior

  except
    on E: Exception do
      ShowMessage('Erro ao fazer login: ' + E.Message);
  end;

  JSONRequest.Free;
  JSONResponse.Free;
  IdHTTP.Free;
end;

procedure TfrmMain.btnConsultarClick(Sender: TObject);
var
  http: TIdHTTP;
  ioHandler: TIdSSLIOHandlerSocketOpenSSL;
  request: TIdHTTPRequest;
  response: string;
  requestBody: TStringStream;
  Confirma: Integer;
begin
  if edtPlaca.Text = EmptyStr then
    Exit;

  Confirma := MessageDlg('Deseja realmente consultar a placa ' + edtPlaca.Text + ' ?', mtConfirmation, [mbYes, mbNo], 0);
  if Confirma = mrNo then
    Exit;

  // Alterar o nome da tarja de título da janela
  Caption := 'Consultando Placa: ' + edtPlaca.Text;

  btnConsultar.Caption := 'Consultando. Aguarde...';
  btnConsultar.Repaint;

  http := TIdHTTP.Create(nil);
  ioHandler := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
  request := TIdHTTPRequest.Create(nil);
  requestBody := TStringStream.Create;

  try
    http.IOHandler := ioHandler;
    http.Request.ContentType := 'application/json';
    http.Request.CustomHeaders.AddValue('SecretKey', '193b1f11-49ae-4a43-80bc-8b3349651632');
    http.Request.CustomHeaders.AddValue('PublicToken', 'a2743b52063cd87a65d1633f5c74f5');
    http.Request.CustomHeaders.AddValue('DeviceToken', token.Text);
    http.Request.CustomHeaders.AddValue('Authorization', 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczovL3BsYXRhZm9ybWEuYXBpYnJhc2lsLmNvbS5ici9hdXRoL2xvZ2luIiwi'+'aWF0IjoxNjg1NjI0MzIxLCJleHAiOjE3MTcxNjAzMjEsIm5iZiI6MTY4NTYyNDMyMSwianRpIjoiSEZhc3MzRDJ2YUNqTUM5RyIsInN1YiI6IjMyMTYiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.GAhup3VE8AZItnTblGhr5ucmAQoJlyKkjzkzVlswc2Q');

    requestBody.WriteString('{"placa":"' + edtPlaca.Text + '"}');

    response := http.Post('https://cluster.apigratis.com/api/v1/vehicles/dados', requestBody);

    MemoLog.Lines.Text := response;
  except
    on E: Exception do
    begin
      ShowMessage('Erro: ' + E.Message);
    end;
  end;

  btnConsultar.Caption := '       Consultar Placa          ';

  // Restaurar o nome original da tarja de título da janela
  Caption := 'Consulta Placa';
end;


////////////////PEGANDO OS DADOS DO JSON E COLOCANDO NO MEUS CAMPOS ADEQUADAMENTE//////////
procedure TfrmMain.MemoLogChange(Sender: TObject);
var
  JSONString: string;
  JSONObject: TJSONObject;
  ResponseObject: TJSONObject;
  ExtraObject: TJSONObject;
  CombustivelObject: TJSONObject;
  CombustivelValue: TJSONValue;
  MunicipioValue: TJSONValue;
  UFValue: TJSONValue;
  ChassiValue: TJSONValue;
  CorValue: TJSONValue;
  AnoValue: TJSONValue;
  AnoObject: TJSONObject;
  AnoModeloValue: TJSONValue;
  FipeObject: TJSONObject;
  DadosArray: TJSONArray;
  DadosObject: TJSONObject;
  ValorFipeValue: TJSONValue;
  OrigemValue: TJSONValue;
  SituacaoValue: TJSONValue;
  RestricaoObject: TJSONObject;
  RestricaoValue: TJSONValue;
begin
  // Verificar se o MemoLog está vazio
  if MemoLog.Lines.Count = 0 then
    Exit;

  // Obter a string JSON do MemoLog
  JSONString := MemoLog.Lines.Text;

  // Fazer o parsing do JSON
  JSONObject := TJSONObject.ParseJSONValue(JSONString) as TJSONObject;

  try
    if Assigned(JSONObject) then
    begin

      ResponseObject := JSONObject.GetValue('response') as TJSONObject;   // Obter o objeto "response" do JSON
      if Assigned(ResponseObject) then
      begin

        ExtraObject := ResponseObject.GetValue('extra') as TJSONObject;
        if Assigned(ExtraObject) then
        begin

          ChassiValue := ExtraObject.GetValue('chassi');    // Obter o valor da tag "chassi" dentro do objeto "extra"
          if Assigned(ChassiValue) then
          begin

            Chassi.Text := ChassiValue.Value;
          end;


          CombustivelObject := ExtraObject.GetValue('combustivel') as TJSONObject;
          if Assigned(CombustivelObject) then
          begin

            CombustivelValue := CombustivelObject.GetValue('combustivel');      // Obter o valor da tag "combustivel" dentro do objeto "combustivel"
            if Assigned(CombustivelValue) then
            begin

              Combustivel.Text := CombustivelValue.Value;
            end;
          end;

          Renavam.Text := ExtraObject.GetValue('renavam').Value;                // Obter o valor da tag "renavam" dentro do objeto "extra"


          RestricaoObject := ExtraObject.GetValue('restricao_1') as TJSONObject;// Obter o objeto "restricao" dentro do objeto "extra"
          if Assigned(RestricaoObject) then
          begin
            RestricaoValue := RestricaoObject.GetValue('restricao');
            if Assigned(RestricaoValue) then
            begin
              Restricao.Text := RestricaoValue.Value;
            end;
          end;
        end;


        OrigemValue := ResponseObject.GetValue('origem');                     // Obter o valor da tag "origem" do JSON
        if Assigned(OrigemValue) then
        begin
          nacionalidade.Text := OrigemValue.Value;
        end;


        SituacaoValue := ResponseObject.GetValue('situacao');                 // Obter o valor da tag "situacao" do JSON
        if Assigned(SituacaoValue) then
        begin
          Situacao.Text := SituacaoValue.Value;
        end;



        AnoValue := ResponseObject.GetValue('ano');               // Obter o valor da tag "ano" do JSON
        if Assigned(AnoValue) then
        begin
          Ano.Text := AnoValue.Value;
        end;




        AnoModeloValue := ResponseObject.GetValue('anoModelo');               // Obter o valor da tag "anoModelo" do JSON
        if Assigned(AnoModeloValue) then
        begin
          AnoModelo.Text := AnoModeloValue.Value;
        end;


        MunicipioValue := ResponseObject.GetValue('municipio');               // Obter o valor da tag "municipio" do JSON
        if Assigned(MunicipioValue) then
        begin
          Municipio.Text := MunicipioValue.Value;
        end;
        UFValue := ResponseObject.GetValue('uf');
        if Assigned(UFValue) then
        begin
          UF.Text := '/' + UFValue.Value;
        end;


        CorValue := ResponseObject.GetValue('cor');                           // Obter o valor da tag "cor" dentro do objeto "response" do JSON
        if Assigned(CorValue) then
        begin
          Cor.Text := CorValue.Value;
        end;


        Marca.Text := ResponseObject.GetValue('MARCA').Value;
        Modelo.Text := ResponseObject.GetValue('MODELO').Value;


        FipeObject := ResponseObject.GetValue('fipe') as TJSONObject;         // Obter o objeto "fipe" do JSON
        if Assigned(FipeObject) then
        begin

          DadosArray := FipeObject.GetValue('dados') as TJSONArray;
          if Assigned(DadosArray) and (DadosArray.Count > 0) then
          begin

            DadosObject := DadosArray.Items[0] as TJSONObject;
            if Assigned(DadosObject) then
            begin
              ValorFipeValue := DadosObject.GetValue('texto_valor');
              if Assigned(ValorFipeValue) then
              begin
               ValorFipe.Text := ValorFipeValue.Value;
              end;
            end;
          end;
        end;
      end;
    end;
  finally
    JSONObject.Free;

  end;
end;


procedure TfrmMain.ClearClick(Sender: TObject);
var
  Confirma: Integer;
begin
  Confirma := MessageDlg('Tem certeza que deseja limpar todos os campos?', mtConfirmation, [mbYes, mbNo], 0);
  if Confirma = mrYes then
  begin

    MemoLog.Clear;
    edtPlaca.Clear;
    Marca.Clear;
    Municipio.Clear;
    Renavam.Clear;
    Modelo.Clear;
    Chassi.Clear;
    Cor.Clear;
    Combustivel.Clear;
    AnoModelo.Clear;
    UF.Clear;
    ValorFipe.Clear;
    nacionalidade.Clear;
    situacao.Clear;
    restricao.Clear;
    Ano.Clear;

    ShowMessage('Campos limpos com sucesso.');
  end;
end;

procedure TfrmMain.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
var
  Confirma: Integer;
begin
  Confirma := MessageDlg('Tem certeza que deseja sair?', mtConfirmation, [mbYes, mbNo], 0);
  CanClose := Confirma = mrYes;
end;

procedure TfrmMain.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Action := caFree;
end;




end.

